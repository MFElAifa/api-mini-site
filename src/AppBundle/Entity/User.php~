<?php
namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation as Serializer;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Security\Core\User\UserInterface;
#use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity as email;

/**
* @ORM\Entity()
* @ORM\Table(name="users", uniqueConstraints={@ORM\UniqueConstraint(name="users_email_unique",columns={"email"})}
* )
*/
class User implements UserInterface
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     *
     * @Serializer\Groups({"list"})
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="firstname", type="string", length=100)
     *
     * @Assert\NotBlank(message="FirstName Required!")
     */
    private $firstname;
    
    /**
     * @var string
     *
     * @ORM\Column(name="lastname", type="string", length=100)
     *
     * @Assert\NotBlank(message="LastName Required!")
     */
    private $lastname;

    /**
     * @var string
     *
     * @ORM\Column(name="email", type="string", length=100)
     *
     * @Assert\NotBlank(message="Email Required!")
     * @Assert\Email(message="The email '{{ value }}' is not a valid email.")
     */
    private $email;
    
    private $password;
    
    /**
     * @var string
     *
     * @ORM\Column(name="plainpassword", type="string", length=100)
     *
     * @Assert\NotBlank(message="plainPassword Required!")
     * @Assert\Length(
     *      min = 4,
     *      max = 50,
     *      minMessage = "Your first name must be at least {{ limit }} characters long",
     *      maxMessage = "Your first name cannot be longer than {{ limit }} characters"
     * )
     *
     * @Serializer\Groups({"New", "FullUpdate"})
     */
    private $plainPassword;

    
    public function getRoles()
    {
        return [];
    }

    public function getPassword()
    {
        return $this->password;
    }

    public function getSalt()
    {
        return null;
    }

    public function getUsername()
    {
        return $this->email;
    }

    public function eraseCredentials()
    {
    	// Suppression des donnÃ©es sensibles
        $this->plainPassword = null;
    }
}